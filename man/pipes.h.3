.TH pipes.h 3 2014-09-09 "" ""
.SH NAME
pipes.h \- build pipe chains

.SH SYNOPSIS
.br
.nf
.B #include <pipes/pipes.h>

.SS "Data Structures"
.nf
struct \fBpipes\fP;
struct \fBpipes_chain\fP;

.SS "Functions"
.nf
int \fBpipes_open\fP(char const *const \fIargv\fP[], char const *const \fIenvp\fP[],
               struct \fBpipes\fP* \fIpipes\fP);
int \fBpipes_close\fP(struct \fBpipes\fP* \fIpipes\fP);
.sp
int \fBpipes_open_chain\fP(struct \fBpipes_chain\fP \fIchain\fP[]);
int \fBpipes_close_chain\fP(struct \fBpipes_chain\fP \fIchain\fP[]);
int \fBpipes_kill_chain\fP(struct \fBpipes_chain\fP \fIchain\fP[], int \fIsig\fP);
.sp
int \fBpipes_take_in\fP(struct \fBpipes_chain\fP \fIchain\fP[]);
int \fBpipes_take_out\fP(struct \fBpipes_chain\fP \fIchain\fP[]);
int \fBpipes_take_err\fP(struct \fBpipes_chain\fP \fIchain\fP[]);

.SS "Macros"
.nf
#define \fBPIPES_GET_LAST\fP(\fICHAIN\fP)
#define \fBIPES_GET_IN\fP(\fICHAIN\fP)
#define \fBIPES_GET_OUT\fP(\fICHAIN\fP)
#define \fBIPES_GET_ERR\fP(\fICHAIN\fP)

.SH DESCRIPTION
Functions to build pipe chains between programs.

.SS sctruct pipes

.PP
.in +4n
.nf
struct pipes {
	pid_t pid;     /* process ID of opened child process */
	int   infd;    /* pipe to stdin of child process     */
	int   outfd;   /* pipe to stdout of child process    */
	int   errfd;   /* pipe to stderr of child process    */
};
.fi
.in

The \fIinfd\fP, \fIoutfd\fP, and \fIerrfd\fP fields of \fIpipes\fP may either be set to valid
file descriptors or to one of the following special values. In case they are file descriptors
they will be used as the appropriate stream in the child process and will be closed in the
parent process. \fBpipes_open\fP() and \fBpipes_open_chain\fP() ensure that any passed file
descriptor will be always closed, no matter if the call was successful or resulted in an error.

.TP
.B PIPES_LEAVE
Leave stream unchaned (i.e. don't open a pipe to the stream of the child process).

.TP
.B PIPES_PIPE
Open a pipe to this stream of the child process. For \fIinfd\fP the write end of the pipe will
be returned in the same field. For \fIoutfd\fP and \fIerrfd\fP the read end of the pipe will
be retuned in the same field.

.TP
.B PIPES_NULL
Pipe this stream to/from \fI/dev/null\fP.

.TP
.B PIPES_ERR_TO_OUT
Redirect child process stderr to stdout. This is only valid for the \fIerrfd\fP field.

.TP
.B PIPES_TEMP
Open a temporary file as this stream. If supported by the kernel and filesystem this
will be done using the \fBO_TMPFILE\fP flag. A copy of the file descriptor will be
returned in the same field.

.PP
These helper macros can be used to initialize the \fIpipes\fP structure:

.TP
.B PIPES_PASS
Set \fIinfd\fP and \fIoutfd\fP to \fBPIPES_PIPE\fP and set \fIerrfd\fP to \fBPIPES_LEAVE\fP.
This is useful for intermediaries in a pipe chain.

.TP
.BI PIPES_IN( IN )
Set \fIinfd\fP to \fIIN\fP, \fIoutfd\fP to \fBPIPES_PIPE\fP and \fIerrfd\fP to
\fBPIPES_LEAVE\fP.

.TP
.BI PIPES_OUT( OUT )
Set \fIinfd\fP to \fBPIPES_PIPE\fP, \fIoutfd\fP to \fIOUT\fP and \fIerrfd\fP to
\fBPIPES_LEAVE\fP.

.TP
.BI PIPES_ERR( ERR )
Set \fIinfd\fP to \fBPIPES_PIPE\fP, \fIoutfd\fP to \fBPIPES_LEAVE\fP and \fIerrfd\fP to
\fIERR\fP.

.TP
.B PIPES_FIRST
Set \fIoutfd\fP to \fBBR PIPES_PIPE\fP and the rest to \fBPIPES_LEAVE\fP. This is useful for
the first command in a chain.

.TP
.B PIPES_LAST
Set \fIinfd\fP to \fBPIPES_PIPE\fP and the rest to \fBPIPES_LEAVE\fP. This is useful for the
last command in a chain.

.SS struct pipes_chain

.PP
.in +4n
.nf
struct pipes_chain {
	struct pipes       pipes;   /* see above                         */
	char const* const* argv;    /* NULL terminated argument array    */
	char const* const* envp;    /* NULL terminated environment array */
};
.fi
.in

\fBpipes_chain_open\fP() accepts an array of \fBpipe_chain\fP structures. It passed the fields
of each structure to an \fBpipes_open\fP() call.

.SS int pipes_open(char const *const \fIargv\fP[], char const *const \fIenvp\fP[], struct pipes* \fIpipes\fP);
Spawn a child process and open pipes to it's io streams.

\fIargv\fP is a NULL terminated array of arguments. The first one is the program to execute
and does not need to be an absolute path.

\fIenvp\fP is a NULL terminated array of environment variables. After forking, the child
processes global \fBenviron\fP variable will be set to this value. If \fIenvp\fP is NULL it will
be ignored. See also: \fBenviron\fP(3)

On success returns 0, on error returns -1 and sets \fBerrno\fP. If \fIinfd\fP, \fIoutfd\fP or
\fIerrfd\fP has an illegal value \fBerrno\fP is set to \fBEINVAL\fP. For other possible error
codes see \fBopen\fP(2), \fBpipe\fP(2), \fBdup2\fP(2), and \fBfork\fP(2).

.SS int pipes_close(struct pipes* \fIpipes\fP)
Close all pipes previously opened with \fBpipes_open\fP(). It is save to call this even if the
\fBpipes_open\fP() call failed.

Returns 0 on success, -1 if \fBclose\fP(2) on any of the file descriptors failed.

.SS int pipes_open_chain(struct pipes_chain \fIchain\fP[])
Spawn a number of child prcesses and open pipes between them. Intermediate pipes are
not accessible by the calling process.

The last element of \fIchain\fP is marked by setting \fIargv\fP to NULL. \fIenvp\fP can be NULL
and \fIpipes\fP must be initialized in the same way as for \fBpipes_open\fP().

On success returns 0, on error returns -1 and sets \fBerrno\fP. In addition to the errors
defined by \fBopen_pipes\fP() \fBerrno\fP will be set to \fBEINVAL\fP if \fIchain\fP is NULL
or points to an empty array or if an element in the chain has \fIinfd\fP defined as
\fBPIPES_PIPE\fP but the preceding element hasn't defined \fIoutfd\fP as \fBPIPES_PIPE\fP.

.SS int pipes_close_chain(struct pipes_chain \fIchain\fP[])
Close all pipes in \fIchain\fP and sets them to -1. It is save to call this even if the
\fBpipes_open\fP() call failed.

Returns 0 on success, -1 if \fBclose\fP(2) on any of the file descriptors failed.

.SS int pipes_kill_chain(struct pipes_chain \fIchain\fP[], int \fIsig\fP)
Send signal \fIsig\fP to all processes in \fIchain\fP.

Returns 0 on success, -1 if \fBkill\fP(2) on any of the processes failed. It will still try
to send the signal to the rest of the chain.

.SS pipes_take_in(struct pipes_chain \fIchain\fP[])
Return the pipe to the input stream pipe of the first process in the \fIchain\fP. The \fIinfd\fP
field in the chain will be set to -1 so a successive \fBpipes_close_chain\fP() call won't close
it.

If the chain is empty -1 will be returned and \fBerrno\fP will be set to \fBEINVAL\fP. Note that
-1 will also be returned if \fIinfd\fP of the first element is -1.

.SS pipes_take_out(struct pipes_chain \fIchain\fP[])
Return the pipe to the output stream pipe of the last process in the \fIchain\fP. The \fIoutfd\fP
field in the chain will be set to -1 so a successive \fBpipes_close_chain\fP() call won't close it.

If the chain is empty -1 will be returned and \fBerrno\fP will be set to \fBEINVAL\fP. Note that
-1 will also be returned if \fIoutfd\fP of the last element is -1.

.SS pipes_take_err(struct pipes_chain \fIchain\fP[])
Return the pipe to the error stream pipe of the last process in the \fIchain\fP. The \fIerrfd\fP
field in the chain will be set to -1 so a successive \fBpipes_close_chain\fP() call won't close it.

If the chain is empty -1 will be returned and \fBerrno\fP will be set to \fBEINVAL\fP. Note that
-1 will also be returned if \fIerrfd\fP of the last element is -1.

.SS PIPES_GET_LAST(\fICHAIN\fP)
Macro to get the last pipe in \fICHAIN\fP. Note that \fICHAIN\fP must be an array, not a pointer.

.SS PIPES_GET_IN(\fICHAIN\fP)
Macro to get the input stream pipe of the first process in \fICHAIN\fP.

.SS PIPES_GET_OUT(\fICHAIN\fP)
Macro to get the output stream pipe of the last process in \fICHAIN\fP. Note that \fICHAIN\fP
must be an array, not a pointer.

.SS PIPES_GET_ERR(\fICHAIN\fP)
Macro to get the error stream pipe of the last process in \fICHAIN\fP. Note that \fICHAIN\fP
must be an array, not a pointer.

.SH SOURCE
Get the source at https://github.com/panzi/pipes

.SH AUTHOR
Mathias Panzenb√∂ck (grosser.meister.morti@gmx.net)

.SH SEE ALSO
\".BR fpipes.h (3),
.BR environ (3),
.BR execvp (3),
.BR fork (2),
.BR pipe (2),
.BR popen (3)
